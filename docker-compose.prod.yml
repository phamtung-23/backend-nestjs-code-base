# Production configuration

services:
  postgres:
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: redis-server --appendonly yes
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  traefik:
    image: traefik:v3.0
    restart: always
    command:
      - --configFile=/etc/traefik/prod.yml
    ports:
      - "80:80"
      - "443:443"
      # Dashboard port removed in production
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/prod.yml:/etc/traefik/prod.yml:ro  # Production config only
      - ./traefik/dynamic-prod.yml:/etc/traefik/dynamic-prod.yml:ro  # Production dynamic config only
      - ./traefik/acme.json:/acme.json  # SSL certificates storage
    # No labels needed - dashboard completely disabled in production
    environment:
      - DOMAIN=${DOMAIN}
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build:
      target: production
    ports:
      - "${NESTJS_CONTAINER_PORT}:${NESTJS_PORT}"  # Expose port directly for external access
    environment:
      NODE_ENV: production
      PORT: ${NESTJS_PORT}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      API_PREFIX: ${API_PREFIX}
      SWAGGER_PUBLIC_BASE_URL: ${SWAGGER_PUBLIC_BASE_URL}
      # Frontend URL (for email links)
      FRONTEND_URL: ${FRONTEND_URL}
      # OTP configuration
      OTP_EXPIRY_MINUTES: ${OTP_EXPIRY_MINUTES}
      OTP_MAX_ATTEMPTS: ${OTP_MAX_ATTEMPTS}
      OTP_RATE_LIMIT_MINUTES: ${OTP_RATE_LIMIT_MINUTES}
      OTP_CODE_LENGTH: ${OTP_CODE_LENGTH}
      # Redis configuration
      REDIS_HOST: ${REDIS_HOST-redis}
      REDIS_PORT: ${REDIS_PORT-6379}
      # SMTP Email Configuration
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      # API Router
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=${NESTJS_PORT}"
      - "traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.backend.middlewares=backend-stripprefix,prod-security-headers@file,prod-rate-limit@file,gzip-compression@file"
      - "traefik.http.routers.backend.priority=10"
    restart: always
    # Remove development volumes
    volumes: []
    # Remove debug port - using Traefik instead
    # ports:
    #   - "${NESTJS_CONTAINER_PORT}:${NESTJS_PORT}"
    # Health check for production
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${NESTJS_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Production security settings
    security_opt:
      - no-new-privileges:true
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  redis_data:

# Sử dụng cùng network với base docker-compose.yml
networks:
  default:
    name: traefik-network
    driver: bridge
