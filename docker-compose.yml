services:
  traefik:
    image: traefik:v3.0
    restart: always
    command:
      - --configFile=/etc/traefik/dev.yml
    ports:
      - "80:80"
      - "443:443"
      # - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/dev.yml:/etc/traefik/dev.yml:ro  # Development config
      - ./traefik/dynamic-dev.yml:/etc/traefik/dynamic-dev.yml:ro
    environment:
      - DOMAIN=${DOMAIN:-localhost}
    labels:
      - "traefik.enable=true"
      # Traefik Dashboard via port 8080 (direct access)
      - "traefik.http.routers.dashboard.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.dashboard.entrypoints=traefik"
      - "traefik.http.routers.dashboard.service=api@internal"

  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: redis-server --appendonly yes

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    depends_on:
      - postgres
      - traefik
    restart: always
    labels:
      - "traefik.enable=true"
      # API Router
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN:-localhost}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=${NESTJS_PORT}"
      - "traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.backend.middlewares=backend-stripprefix"
      - "traefik.http.routers.backend.priority=10"
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${NESTJS_PORT}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      API_PREFIX: ${API_PREFIX}
      # Frontend URL (for email links)
      FRONTEND_URL: ${FRONTEND_URL}
      # OTP configuration
      OTP_EXPIRY_MINUTES: ${OTP_EXPIRY_MINUTES}
      OTP_MAX_ATTEMPTS: ${OTP_MAX_ATTEMPTS}
      OTP_RATE_LIMIT_MINUTES: ${OTP_RATE_LIMIT_MINUTES}
      OTP_CODE_LENGTH: ${OTP_CODE_LENGTH}
      # Redis configuration
      REDIS_HOST: ${REDIS_HOST-redis}
      REDIS_PORT: ${REDIS_PORT-6379}
      # SMTP Email Configuration
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}

volumes:
  redis_data:

# Network để kết nối với FE docker-compose riêng biệt
networks:
  default:
    name: traefik-network
    driver: bridge
